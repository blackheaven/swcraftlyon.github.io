<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dojo on Compte-rendus des software crafters de Lyon</title>
    <link>https://swcraftlyon.github.io/tags/dojo/</link>
    <description>Recent content in dojo on Compte-rendus des software crafters de Lyon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-FR</language>
    <lastBuildDate>Fri, 17 Jan 2020 13:44:25 +0200</lastBuildDate>
    
	<atom:link href="https://swcraftlyon.github.io/tags/dojo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Coding Dojo Mardi 21 Janvier 2020</title>
      <link>https://swcraftlyon.github.io/posts/2020-01-21-coding-dojo/</link>
      <pubDate>Fri, 17 Jan 2020 13:44:25 +0200</pubDate>
      
      <guid>https://swcraftlyon.github.io/posts/2020-01-21-coding-dojo/</guid>
      <description>Sujet : GuildedRose (https://github.com/emilybache/GildedRose-Refactoring-Kata) Format : Pair programming Langage : Postgresql Nombre de participants : 14  Retours participants :  Que faire du golden master une fois le refacto terminé ? On va chercher à le supprimer. Le golden master est &amp;ldquo;fragile&amp;rdquo; à l&amp;rsquo;ajout d&amp;rsquo;une nouvelle feature / évolution. Besoin de visualisation du coverage + mutation based testing pour s&amp;rsquo;assurer que le golden couvre bien tous les cas.</description>
    </item>
    
    <item>
      <title>Coding Dojo Vendredi 17 Janvier 2020</title>
      <link>https://swcraftlyon.github.io/posts/2020-01-17-coding-dojo/</link>
      <pubDate>Fri, 17 Jan 2020 13:44:25 +0200</pubDate>
      
      <guid>https://swcraftlyon.github.io/posts/2020-01-17-coding-dojo/</guid>
      <description>Sujet : TicTacToe (https://github.com/AgileTechPraxis/CodeSmells) Format : Mob programming Langage : C# Nombre de participants : 9  Retours participants :  Similaire au travail quotidien, on élimine des smells et bugs potentiels Plus accessible que le Gilded Rose Bien reçu par les moins expérimentés Beaucoup de complexité/bugs potentiels à cause de la façon dont est stocké l&amp;rsquo;état du système Difficultés à faire des baby steps lors des refactos Volonté tout de même de chercher des étapes plus petites Groupe de 9 personne bien pour ce format : tout le monde s&amp;rsquo;est exprimé, a pu participer Le groupe a bien ciblé les smells qui souhaitait adresser Un peu rapide pour certains, aurait mérité d&amp;rsquo;expliquer les smells  ROTI : -&amp;gt; 5&amp;frasl;5 3 -&amp;gt; 4&amp;frasl;5 5 -&amp;gt; 3&amp;frasl;5 1</description>
    </item>
    
    <item>
      <title>Coding Dojo 02 12 2019</title>
      <link>https://swcraftlyon.github.io/posts/2019-12-02-coding-dojo/</link>
      <pubDate>Mon, 02 Dec 2019 20:33:54 +0100</pubDate>
      
      <guid>https://swcraftlyon.github.io/posts/2019-12-02-coding-dojo/</guid>
      <description>Sujet : Diamond Kata Format : Pair programming Langage : Java, C#, Scala, TypeScript, Swift Nombre de participants : 20  Retours participants Tous le monde n&amp;rsquo;est pas arrivé au bout. Micro-steps : difficile en partant en mode &amp;ldquo;voilà le diamant que l&amp;rsquo;on attend&amp;rdquo;. Stratégie : pleins de petites méthodes utilitaires -&amp;gt; approche outside-in (beaucoup utilisé) -&amp;gt; petites méthodes testées -&amp;gt; tests spécifiques à ces méthodes peuvent être supprimés une fois le diamant généré</description>
    </item>
    
    <item>
      <title>Coding Dojo Lundi 21 Octobre 2019</title>
      <link>https://swcraftlyon.github.io/posts/2019-10-21-coding-dojo/</link>
      <pubDate>Mon, 21 Oct 2019 20:28:33 +0200</pubDate>
      
      <guid>https://swcraftlyon.github.io/posts/2019-10-21-coding-dojo/</guid>
      <description>Sujet : Pair programming Format : Pair + 1 Trinôme Langage : TypeScript, Java, C#, F# Nombre de participants : 19  Retours participants :
 me suis bien amusé la pétanque, c&amp;rsquo;est plus facile types algébriques très très compliqués frustrant car le code pas à soi et donc il faut repartir de zéro à chaque fois - choix de juste expliquer le besoin fonctionnel difficultés entre le code et explication fonctionnelle d&amp;rsquo;autres groupe plus dans l&amp;rsquo;accompagnement de l&amp;rsquo;algo frustrant car kata jamais fait =&amp;gt; du coup difficile de voir le côté en aveugle frustrant car kata trop connu certains devaient s&amp;rsquo;accrocher quand la personne connaissait bien le kata certains se pliaient vraiment à ce que la personne disait de faire et du coup se laissait aller à de nouvelles solutions le groupe de 3 considère avoir eu des échanges plus poussés difficile de raisonner sans le code sous les yeux surtout lors d&amp;rsquo;un refacto jeux d&amp;rsquo;échecs à l&amp;rsquo;aveugle Roti : 11 à 4&amp;frasl;5 et 8 à 3&amp;frasl;5, soit une moyenne de 3.</description>
    </item>
    
    <item>
      <title>Coding Dojo du soir du mardi 24 septembre 2019</title>
      <link>https://swcraftlyon.github.io/posts/2019-09-24-coding-dojo/</link>
      <pubDate>Tue, 24 Sep 2019 13:24:29 +0200</pubDate>
      
      <guid>https://swcraftlyon.github.io/posts/2019-09-24-coding-dojo/</guid>
      <description>Première heure: (Animé par Romain)  Sujet : Kata Employee-report Objectif : Challenger les participants sur leur manière d&amp;rsquo;écrire une assertion Format : Pair Langages : Java, C#, JavaScript Nombre de participants : 15  Retours participants :
 Complexe sans syntaxe fluent Assertions couplées à la donnée : une évolution du comportement peut faire échouer les tests existants Plusieurs stratégies :  créer des données &amp;ldquo;attendues&amp;rdquo; statiques test plus dynamique (propriété) -&amp;gt; plus facile d&amp;rsquo;écrire un test par comportement attendu  Un test par comportement ?</description>
    </item>
    
    <item>
      <title>Coding Dojo pause repas du lundi 22 juillet 2019</title>
      <link>https://swcraftlyon.github.io/posts/2019-07-22-coding-dojo/</link>
      <pubDate>Thu, 01 Aug 2019 17:05:00 +0200</pubDate>
      
      <guid>https://swcraftlyon.github.io/posts/2019-07-22-coding-dojo/</guid>
      <description>Sujet : Kata SuperMarket Format : Mob programming Langage : C# Nombre de participants : 8  Objectif:
 S&amp;rsquo;améliorer à refactorer le code Découvrir ce kata d&amp;rsquo;Emily Bache  Déroulement:
 Présentation du kata Recherche tout ensemble des codes smells (code posant problème). Explication en quand ils posent problème pour chacun d&amp;rsquo;eux. Début du refactoring en prenant les codes smells un par un, après les avoir priorisés.  Retours participants :</description>
    </item>
    
    <item>
      <title>Coding Dojo Mardi 16 juillet 2019</title>
      <link>https://swcraftlyon.github.io/posts/2019-07-16-coding-dojo/</link>
      <pubDate>Tue, 16 Jul 2019 22:06:02 +0200</pubDate>
      
      <guid>https://swcraftlyon.github.io/posts/2019-07-16-coding-dojo/</guid>
      <description>Sujet : Kata Tennis Refactoring d&amp;rsquo;Emily Bache Format : Evil Mob Programming.
Parmi les participants se cachent des saboteurs. Ils ont pour but d&amp;rsquo;empêcher le déroulement de la session. Ils ne doivent pas se faire remarquer.
 Langages : un groupe de 13 personnes en Java, un groupe de 10 personnes en JavaScript
 Nombre de participants total : 23
  Retours participants :
 Ce qui permet de faire avancer la session</description>
    </item>
    
    <item>
      <title>Coding Dojo Jeudi 20 Juin 2019</title>
      <link>https://swcraftlyon.github.io/posts/2019-06-20-coding-dojo/</link>
      <pubDate>Thu, 20 Jun 2019 20:45:05 +0200</pubDate>
      
      <guid>https://swcraftlyon.github.io/posts/2019-06-20-coding-dojo/</guid>
      <description>Sujet : Task list - Primitive obsession Format : Pair programming Langage : Java - Scala - Ruby Nombre de participants : 16  Retours participants :
 D&amp;rsquo;abord vérifer que ça compile, puis rajouter la deadline en type union (scala : un ensemble fermé de valeur, un peu comme une enum), gérer la liste de task (ou project liste ?) Bien galérer sur les tests, difficulté à comprendre ce qui est testé vraiment L&amp;rsquo;immutabilité c&amp;rsquo;est bien Une deadline encapsule une date, ajouter un taskId (vraiment utile ?</description>
    </item>
    
    <item>
      <title>Coding Dojo Mardi 11 Juin 2019</title>
      <link>https://swcraftlyon.github.io/posts/2019-06-11-coding-dojo/</link>
      <pubDate>Tue, 11 Jun 2019 13:44:25 +0200</pubDate>
      
      <guid>https://swcraftlyon.github.io/posts/2019-06-11-coding-dojo/</guid>
      <description> Sujet : Consumer Kata d&amp;rsquo;Emily Bache Format : Mob programming Langage : Java Nombre de participants : 6  Retours participants :
 Manque de temps pour aller au bout Contrainte de limiter à une interface permet de se concentrer sur ce qu&amp;rsquo;il faut Frustration de ne pas pouvoir aller loin Golden master pas applicable dans ce cas Le code semble tellement pourri qu&amp;rsquo;avec les besoins fonctionnels on pourrait le faire de zéro Peut se faire devant un tableau blanc pour comprendre ce qu&amp;rsquo;il se passe Consumer / Customer amène confusion Kata intéressant, avoir plein de points de vue Kata pas évident : pelote de laine à démêler, mais ça fait parti d&amp;rsquo;un projet normal Cool de pouvoir partager les tips de raccourci Kata qui pousse à explorer différentes manières de découvrir des besoins fonctionnels et c&amp;rsquo;est pas toujours facile Difficile de s&amp;rsquo;accrocher pour un débutant  </description>
    </item>
    
    <item>
      <title>Coding Dojo Mardi 28 Mai 2019</title>
      <link>https://swcraftlyon.github.io/posts/2019-05-28-coding-dojo/</link>
      <pubDate>Tue, 28 May 2019 20:28:33 +0200</pubDate>
      
      <guid>https://swcraftlyon.github.io/posts/2019-05-28-coding-dojo/</guid>
      <description>Sujet : Guilded Rose animé par Colin Format : Pair + Mob Langage : Java, PHP, etc. Nombre de participants : 18  Retours participants :
 Feedback rapide avec le golden master (encore faut-il avoir un golden master !) Sans le jeu de données c&amp;rsquo;est difficile La deuxième fois, c&amp;rsquo;est vraiment beaucoup plus simple Pas de bug dans le code d&amp;rsquo;origine -&amp;gt; plutôt voir le kata Trivia pour expérimenter En essayant avec les tests unitaires en premier : meilleure granularité sur les règles métiers qui échouent.</description>
    </item>
    
  </channel>
</rss>